// author: Berat Denizdurduran
// Date: January 21st 2014

#include "spin1_api.h"
#include "spinn_io.h"
#include "spinn_sdp.h"

#define PRINT_DLY          200
#define MS_TICKS          1000
#define SEC_TICKS          MS_TICKS * 1000

typedef short int16_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

#define NUMBER_OF_CHIPS    4
//~ #define CORE_MAP_00        0x0000e
#define CORE_MAP_00        0x00002
#define CORE_MAP_01        0x00002
#define CORE_MAP_10        0x00002
#define CORE_MAP_11        0x00002


#define EAST 0x1
#define N_EAST 0x2
#define NORTH 0x4
#define WEST 0x8
#define S_WEST 0x10
#define SOUTH 0x20

#define CORE(n) (1<< (n+6))

#define TIMESTEP 1000000


#define MGMT_BIT 0x400
#define EVDS1_XY 0x43
#define EVDS1_ENABLE 0x45
#define MOTORS_KEY ((252 << 24) | (255 << 16))

#define BALL_X_CENTER	2001
#define BALL_Y_CENTER	2179

#define LOG_P1                  (8)
#define LOG_P2                  (16)
#define P1						(1 << LOG_P1)
#define P2						(1 << LOG_P2)

#define M 	15

uint core_map[NUMBER_OF_CHIPS];
uint coreID;
uint chipID;

uint x_old_[20];
uint y_old_[20];
uint x_ = 0;
uint y_ = 0;
uint count = 0;


int x_cur = 0;
int y_cur = 0;
int distance = 0;
uint tmp, tmp2;
int x_ave = 64;
int y_ave = 64;

int x_command = 0;
int y_command = 0;


long F = 10 << LOG_P1;
//~ int F = 100;

long Iext;

long J[M];
long Fpre[M];
long U[M];
long x[M];
long Use[M];
long Tr[M];
long Tf[M];

long abs_(long n){
return n < 0 ? -n : n;
}


void ball_control(){

        // static uint32_t payload = 0;

	io_printf(IO_STD, "motor output x y: %d %d\n", (int) x_ave, (int) y_ave);

/*
	uint iivv = 0;

	for(; iivv<20-1; iivv+=1){
            x_old_[iivv] = x_old_[iivv+1];    
            y_old_[iivv] = y_old_[iivv+1];    
        }

	x_old_[20-1] = x_;
	y_old_[20-1] = y_;

	int32_t Vx_ = ((int32_t)x_) - ((int32_t)x_old_[0]);
        int32_t Vy_ = ((int32_t)y_) - ((int32_t)y_old_[0]);

	Iext = 50 << LOG_P1;

	    if(((int32_t)x_-60)*((int32_t)x_-60) + ((int32_t)y_-64)*((int32_t)y_-64)<390){
            if((int32_t)x_<64 && coreID==1){Iext =  54 << LOG_P1;}
            if((int32_t)x_>64 && coreID==3){Iext =  54 << LOG_P1;}
            if((int32_t)y_<64 && coreID==2){Iext =  54 << LOG_P1;}
            if((int32_t)y_>64 && coreID==4){Iext =  54 << LOG_P1;}

            if((int32_t)Vx_<0 && coreID==5){Iext += (-Vx_ *0) << LOG_P1;}
            if((int32_t)Vx_>0 && coreID==7){Iext += ( Vx_  *0)<< LOG_P1;}
            if((int32_t)Vy_<0 && coreID==6){Iext += (-Vy_ *0) << LOG_P1;}
            if((int32_t)Vy_>0 && coreID==8){Iext += ( Vy_  *0)  << LOG_P1;}

		}else{
            if((int32_t)x_<64 && coreID==1){Iext =  58 << LOG_P1;}
            if((int32_t)x_>64 && coreID==3){Iext =  58 << LOG_P1;}
            if((int32_t)y_<64 && coreID==2){Iext =  58 << LOG_P1;}
            if((int32_t)y_>64 && coreID==4){Iext =  58 << LOG_P1;}

            if((int32_t)Vx_<0 && coreID==5){Iext += (-Vx_ *4) << LOG_P1;}
            if((int32_t)Vx_>0 && coreID==7){Iext += ( Vx_  *4)<< LOG_P1;}
            if((int32_t)Vy_<0 && coreID==6){Iext += (-Vy_ *4) << LOG_P1;}
            if((int32_t)Vy_>0 && coreID==8){Iext += ( Vy_  *4)  << LOG_P1;}

        }
*/

	

}



void startRetina() {
  spin1_send_mc_packet(EVDS1_ENABLE | MGMT_BIT, 1, 1);
}



void stopRetina() {
  spin1_send_mc_packet(EVDS1_ENABLE | MGMT_BIT, 0, 1);
}



void eventRX(uint key, uint payload){
 
  		x_cur = ((key & 0x7F));
		y_cur = (((key >> 8) & 0x7F));


		distance = (x_ave-x_cur)*(x_ave-x_cur) + (y_ave-y_cur)*(y_ave-y_cur);

		distance = 100;

		x_ave = ((1023-distance)*x_ave+distance*x_cur) >> 10;
		y_ave = ((1023-distance)*y_ave+distance*y_cur) >> 10;
	
		//spin1_delay_us(100000);
 		
		io_printf (IO_STD, "(%d, %d)\n", x_ave, y_ave);

		if(x_ave<60){
			x_command = -450;
		}
		else
			x_command = 450;

		if(y_ave<60){
			y_command = 450;
		}
		else
			y_command = -450;

		
		// // io_printf(IO_STD, "F: %d\n", (int) F);

		// // if(coreID==1){Iext =  54;}

		// // if(coreID==2){Iext =  44;}

		
		// if(coreID==1){io_printf(IO_STD, "Iext 1 : %d\n", Iext);}
		// // if(coreID==2){io_printf(IO_STD, "Iext 2 : %d\n", Iext);}

		// // if(coreID==5){io_printf(IO_STD, "Iext 5 : %d\n", Iext);}

		spin1_delay_us(1000);
		spin1_send_mc_packet(MOTORS_KEY,BALL_X_CENTER - 300 | ((BALL_Y_CENTER + 300) << 16 ),1);

		// spin1_delay_us(10);	
		spin1_send_mc_packet(MOTORS_KEY | 0x1,(((uint) x_ave)<<16) | ((uint) y_ave),1);

                //io_printf(IO_STD, "retina x y: %d %d\n", (float) 0.4, (int) 5);
}

long IFfct(long long input){
	
	long long output = 0;
	
	long long thr1 = 50 << LOG_P1;
	//~ long long scf = 2 * 256;
	//~ long long scf = 2*256;
	long long scf = 400;
	
	if(input < thr1){output = 0;}
	else{output = ((input - thr1) * scf ) >> LOG_P1;}
	
	if(output > (100 << LOG_P1)){output = 100 << LOG_P1;}
	
	return output;
	
}


void send_mc_packet_rates() {

	long v_decay = 40 << LOG_P1;
	long x_decay = 10;

	long summ = 0;

	int i=0;
	for(i=0; i<M; ++i){

		summ += (((J[i]*Fpre[i]) >> LOG_P1) );

	}

	long dv = (( - F + IFfct( summ + Iext ) ) * v_decay ) >> LOG_P1 ;
	dv = dv >> LOG_P1;

	F = F + dv;

	// // io_printf(IO_STD,"sending mc packet...\n");

	

}

void c_main (void)
{

	int i=0;

	Iext = 0;

	if (NUMBER_OF_CHIPS > 0) core_map[0] = CORE_MAP_00;
	if (NUMBER_OF_CHIPS > 1) core_map[1] = CORE_MAP_01;
	if (NUMBER_OF_CHIPS > 2) core_map[2] = CORE_MAP_10;
	if (NUMBER_OF_CHIPS > 3) core_map[3] = CORE_MAP_11;

	// spin1_set_core_map(NUMBER_OF_CHIPS, core_map);

  	// io_printf(IO_STD,"Core 1: %x\n", CORE(1));
	coreID = spin1_get_core_id();
	chipID = spin1_get_chip_id();
	io_printf(IO_STD,"CoreID: %u\n",coreID);

	io_printf(IO_STD,"CoreID is %u, ChipID is %u\n",coreID, chipID);


	for(i=0; i<M; ++i){
		Fpre[i] = 0;
		x[ i] = P1;
		U[ i] = 0;
		J[ i] = 0;
		Tr[i] = 64;
		Tf[i] = 64;
		Use[i]= 25; // 256 * 0.1 ?
	}

	if (coreID == 9 ){J[1-1] = 300;}
	if (coreID == 10 ){J[2-1] = 300;}
	if (coreID == 11 ){J[3-1] = 300;}
	if (coreID == 12){J[4-1] = 300;}

	if (coreID == 9 ){J[5-1] = 300;}
	if (coreID == 10 ){J[6-1] = 300;}
	if (coreID == 11 ){J[7-1] = 300;}
	if (coreID == 12){J[8-1] = 300;}

	if (coreID == 2 ){io_printf(IO_STD,"CoreID 2 : %u\n",coreID);}

	uint allcores = 0;
	for(i=7; i<7+M+1; ++i){
		allcores |= 1 << i;
	}

	spin1_set_timer_tick(TIMESTEP);

	// spin1_callback_on(TIMER_TICK,ball_pid_control,2);

	// spin1_callback_on(TIMER_TICK,ball_control,2);

	spin1_callback_on(MC_PACKET_RECEIVED,eventRX,1);

	spin1_set_mc_table_entry(coreID, 0x0, 0x0, allcores);

	spin1_set_mc_table_entry(1, 0x02000000, 0xffff0000, allcores);
	
	spin1_set_mc_table_entry(0x1, 	EVDS1_ENABLE | MGMT_BIT, 0xFFFFFFFF, EAST);
	
	spin1_set_mc_table_entry(0x2, 	MOTORS_KEY, 0xFFFF0000,	EAST);
	
	spin1_set_mc_table_entry(0x3, 	0x0,	0x0,	CORE(1)	);

	spin1_send_mc_packet(MOTORS_KEY,BALL_X_CENTER + 600 | ((BALL_Y_CENTER + 600) << 16 ),1);
	
	//spin1_send_mc_packet(EVDS1_ENABLE | MGMT_BIT,1,1);

        startRetina();

	// // spin1_set_timer_tick(1000);
	// // spin1_callback_on(TIMER_TICK, send_mc_packet_rates, 4);


/*
	
    uint weight = 30;
    uint x2 = 1000;
    uint tmp, tmp2;
    tmp2 = 5;


    for (i=0; i< 200000; i++){
        tmp = ((1023-weight)*tmp2+weight*x2);
        tmp2 = tmp >> 10;
        io_printf(IO_STD, "%d -> %d\n", tmp, tmp2);
    }
	*/

        // spin1_delay_us(coreID*5000);

        // stopRetina();

	

	spin1_start();


}


